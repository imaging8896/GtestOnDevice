# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

GTEST_DIR = $(ANDROID_NDK)/sources/third_party/googletest/googletest

USER_DIR = .

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -I $(USER_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

JANSSON_H = $(USER_DIR)/include/jansson.h
API_H = $(USER_DIR)/include/API_wrapper.h
TEST_HEADERS = $(USER_DIR)/include/File.h \
			$(USER_DIR)/include/FilesManager.h \
			$(USER_DIR)/include/garbageCollection.h \
			$(USER_DIR)/include/JsonParser.h
TEST_SRCS = $(USER_DIR)/utils/File.cc \
			$(USER_DIR)/utils/FilesManager.cc \
			$(USER_DIR)/utils/garbageCollection.cc \
			$(USER_DIR)/utils/JsonParser.cc
TEST_OBJS = $(subst /utils,, $(subst .cc,.o, $(TEST_SRCS)))

$(TEST_OBJS) : $(TEST_SRCS) $(TEST_HEADERS) $(JANSSON_H) $(API_H)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_SRCS)


TEST_CASES = $(wildcard $(USER_DIR)/*.cc)
TEST_CASES_OBJS = $(subst .cc,.o, $(TEST_CASES))

$(TEST_CASES_OBJS) : $(TEST_CASES) $(TEST_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_CASES)

unittest : $(TEST_OBJS) $(TEST_CASES_OBJS) gtest_main.a 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread  $^ -o $@ -ljansson 
